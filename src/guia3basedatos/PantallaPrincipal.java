/*
 Cambios Pendientes:
    -- que el nombre de las Bases de Datos esten ordenadas en el combobox por orden alfabetico
    -- poner alguna se√±al visual de que el codigo se ejecuto correctamente. ya que si no es un select o algo que traiga datos no sabes si se ejecuto.
    -- cuando ejecuta una sentencia SQL tienes 2 comandos executeUpdate() y executeQuery() el update es para las sentencias que no regresan una infor como update, create etc.
        es necesario mejorar la forma en que se busca el filtro para poder agregar mas comandos a medida que los vamos aprendiendo con algun arraylist o algo por el estilo
    -- Con los siguiesntes comando agregar otra textArea que contenga los nombres de las tablas y sus campos para poder manejar mejor las consultas
    SHOW FULL TABLES FROM guia3 muestra todas las tablas de una Base de Datos
    desc visita muestra informacion de la tabla Columna tipo de datos etc
    
 */
package guia3basedatos;



import static guia3basedatos.Guia3BaseDatos.conexion;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Dario
 */
public class PantallaPrincipal extends javax.swing.JFrame {
    private boolean primierInicio = true;
    
    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        actualizarCombo();
        setTitle("Sistem de Bases de Datos --- Conectado a " + conexion.getBaseDatos().toUpperCase() );
        jtxComandos.setBackground(Color.WHITE); // cambia de color el fondo del jTextArea
        jcbBaseDatos.setSelectedItem(conexion.getBaseDatos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxComandos = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jcbBaseDatos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxBaseDatos = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmSalir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTabla);

        jtxComandos.setColumns(20);
        jtxComandos.setRows(5);
        jtxComandos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxComandosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtxComandos);

        jButton1.setText("Ejecutar Linea");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ejecutar Todas las Lineas");

        jButton3.setText("Borrar Comandos");

        jButton4.setText("Salir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jcbBaseDatos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jcbBaseDatos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbBaseDatosItemStateChanged(evt);
            }
        });
        jcbBaseDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbBaseDatosMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Base de Datos");

        jButton5.setText("Actualizar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jtxBaseDatos.setColumns(20);
        jtxBaseDatos.setRows(5);
        jScrollPane3.setViewportView(jtxBaseDatos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbBaseDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(90, 90, 90)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jcbBaseDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jButton5)))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        jMenu3.setText("Crear BD");

        jMenuItem6.setText("Ej 1 - Hotel");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("Ej 2 - Veterinario");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Ej 3 - Gestion de Pedidos");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Ej 4 - Construir S. A.");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Ej 5 - Biblioteca");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Cargar BD");

        jMenuItem2.setText("Ej 1 - Hotel");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Ej 2 - Veterinario");
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Ej 3 - Gestion de Pedidos");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Ej 4 - Construir S. A.");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setText("Ej 5 - Biblioteca");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jmSalir.setText("Salir");
        jmSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSalirActionPerformed(evt);
            }
        });
        jMenuBar1.add(jmSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jmSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jmSalirActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        String tabla = "START TRANSACTION;\n"
                + "CREATE TABLE `empleado` (`id_empleado` int NOT NULL,`dni` bigint NOT NULL,`apellido` varchar(58) NOT NULL,`nombre` varchar(58) NOT NULL,`acceso` int NOT NULL,`estado` tinyint NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `herramienta` (`id_herramienta` int NOT NULL,`nombre` varchar(60) NOT NULL,`descripcion` varchar(100) NOT NULL,`stock` int NOT NULL,`estado` tinyint NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `movimiento` (`id_movimiento` int NOT NULL,`id_empleado` int NOT NULL,`id_herramienta` int NOT NULL,`fechap` date NOT NULL,`fechad` date NOT NULL,`cantidadret` int NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "ALTER TABLE `empleado` ADD PRIMARY KEY (`id_empleado`), ADD UNIQUE KEY `dni` (`dni`);\n"
                + "ALTER TABLE `herramienta` ADD PRIMARY KEY (`id_herramienta`);\n"
                + "ALTER TABLE `movimiento` ADD PRIMARY KEY (`id_movimiento`), ADD KEY `id_empleado` (`id_empleado`), ADD KEY `id_herramienta` (`id_herramienta`);\n"
                + "ALTER TABLE `empleado` MODIFY `id_empleado` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `herramienta` MODIFY `id_herramienta` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `movimiento` MODIFY `id_movimiento` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `movimiento` ADD CONSTRAINT `movimiento_ibfk_1` FOREIGN KEY (`id_empleado`) REFERENCES `empleado` (`id_empleado`) ON DELETE RESTRICT ON UPDATE RESTRICT, ADD CONSTRAINT `movimiento_ibfk_2` FOREIGN KEY (`id_herramienta`) REFERENCES `herramienta` (`id_herramienta`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "COMMIT;";
        creaTablas(tabla);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // Crearemos las Tablas del Primer Ejersicio de la Guia
        String tablas = "START TRANSACTION;\n"
                + "CREATE TABLE `categoria` (`idCategoria` int(11) NOT NULL,`cantPersonas` int(11) NOT NULL,`cantCamas` int(11) NOT NULL,`tipoCamas` int(11) NOT NULL,`tipoHabitacion` varchar(11) NOT NULL,`precio` double NOT NULL,`activo` tinyint(4) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n"
                + "CREATE TABLE `habitacion` (`idHabitacion` int(11) NOT NULL,`idCategoria` int(1) NOT NULL,`nmroHabitacion` int(11) NOT NULL,`piso` int(11) NOT NULL,`refaccion` tinyint(4) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n"
                + "CREATE TABLE `huesped` (`idHuesped` int(11) NOT NULL,`nombre` varchar(25) NOT NULL,`apellido` varchar(25) NOT NULL,`dni` bigint(20) NOT NULL,`domicilio` varchar(30) NOT NULL,`correo` varchar(30) NOT NULL,`celular` varchar(30) NOT NULL,`activo` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n"
                + "CREATE TABLE `reserva` (`idReserva` int(11) NOT NULL,`idHabitacion` int(11) NOT NULL,`idHuesped` int(11) NOT NULL,`fechaInicio` date NOT NULL,`fechaFin` date NOT NULL,`precioTotal` double NOT NULL,`cantPersonas` int(11) NOT NULL,`activo` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n"
                + "ALTER TABLE `categoria`  ADD PRIMARY KEY (`idCategoria`);\n"
                + "ALTER TABLE `habitacion`  ADD PRIMARY KEY (`idHabitacion`),  ADD KEY `idCategoria` (`idCategoria`);\n"
                + "ALTER TABLE `huesped` ADD PRIMARY KEY (`idHuesped`), ADD UNIQUE KEY `dni` (`dni`);\n"
                + "ALTER TABLE `reserva` ADD PRIMARY KEY (`idReserva`), ADD UNIQUE KEY `idHabitacion` (`idHabitacion`), ADD KEY `idHuesped` (`idHuesped`);\n"
                + "ALTER TABLE `categoria` MODIFY `idCategoria` int(11) NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `habitacion` MODIFY `idHabitacion` int(11) NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `huesped` MODIFY `idHuesped` int(11) NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `categoria` ADD CONSTRAINT `categoria_ibfk_1` FOREIGN KEY (`idCategoria`) REFERENCES `habitacion` (`idCategoria`);\n"
                + "ALTER TABLE `habitacion`ADD CONSTRAINT `habitacion_ibfk_1` FOREIGN KEY (`idHabitacion`) REFERENCES `reserva` (`idHabitacion`);\n"
                + "ALTER TABLE `reserva` ADD CONSTRAINT `reserva_ibfk_1` FOREIGN KEY (`idHuesped`) REFERENCES `huesped` (`idHuesped`);\n"
                + "COMMIT;";
        creaTablas(tablas);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean correcto = true,actualizar = false; // Correcto para saber si se ejecuto bien la sentencia SQL y Actualizar para saber si es necesario actualizar el jTable
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            //con esto obtenemos la linea completa en la que se encuentra el cursor
            int pos = jtxComandos.getCaretPosition(); // obtiene la posicion del cursor contando los caracteres y saltos de linea digamos que si tiene 10 letras en dos filas regresa 11
            int lineIndex = jtxComandos.getLineOfOffset(pos);  // por medio de la cantidad de caracteres nos regresa el numero de linea que empieza en 0
            int lineStartOffset = jtxComandos.getLineStartOffset(lineIndex); // indica la cantidad inicial del esa linea
            int lineEndOffset = jtxComandos.getLineEndOffset(lineIndex); // indica la cantidad al final de la linea
            String sql = jtxComandos.getText(lineStartOffset, lineEndOffset - lineStartOffset); // extrae todo entre el inicio y fin de linea de la fila en la que se encuentra el cursor
            //System.out.println(lineText);
            // ahora solo tenemos que ejecutarla!!!
          
            Connection con = conexion.getcSQL();
            ps = con.prepareStatement(sql);
            if (sql.toLowerCase().contains("insert") || sql.toLowerCase().contains("update") || sql.toLowerCase().contains("delete") || sql.toLowerCase().contains("use") || sql.toLowerCase().contains("create database") ){ // (INSERT, UPDATE, DELETE) executeQuery cuando es una de esas acciones sino el otro Execute para los demas
                ps.executeUpdate();
            }else{                
                rs = ps.executeQuery();
                // System.out.println("Se ejecuto la consulta");
                actualizar = true;
            }
            jtxComandos.setBackground(Color.YELLOW);
        } catch (BadLocationException | SQLException ex) {
            //Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            jtxComandos.setBackground(Color.RED);
            JOptionPane.showMessageDialog(this, "No se pudo ejecutar la sentencia \n" + ex.getMessage());
            correcto = false;
        }
        if (correcto){
            if (actualizar){ 
              try {
                    modelarTabla(rs); // Metodo que actualize el jTable con el resultado de la tabla.
                } catch (SQLException ex) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        String tabla = "START TRANSACTION;\n"
                + "CREATE TABLE `cliente` (`idCliente` int NOT NULL,`dni` int NOT NULL,`nombre` varchar(30) NOT NULL,`apellido` varchar(30) NOT NULL,`telefono` bigint NOT NULL,`direccion` varchar(50) NOT NULL,`contactoAlternativo` bigint NOT NULL,`activo` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `mascota` (`idMascota` int NOT NULL,`alias` varchar(30) NOT NULL,`sexo` varchar(30) NOT NULL,`especie` varchar(30) NOT NULL,`raza` varchar(30) NOT NULL,`colorPelo` varchar(50) NOT NULL,`fechaNac` date NOT NULL,`idCliente` int NOT NULL,`activo` tinyint NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `tratamiento` (`idTratamiento` int NOT NULL,`descripcion` varchar(70) NOT NULL,`medicamento` varchar(50) NOT NULL,`importe` double NOT NULL,`tipoTratamiento` varchar(30) NOT NULL,`activo` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `visita` (`idVisita` int NOT NULL,`idMascota` int NOT NULL,`fechaVisita` date NOT NULL,`detalle` varchar(50) NOT NULL,`peso` double NOT NULL,`idTratamiento` int NOT NULL,`activo` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "ALTER TABLE `cliente` ADD PRIMARY KEY (`idCliente`), ADD KEY `dni` (`dni`);\n"
                + "ALTER TABLE `mascota` ADD PRIMARY KEY (`idMascota`), ADD KEY `idCliente` (`idCliente`);\n"
                + "ALTER TABLE `tratamiento` ADD PRIMARY KEY (`idTratamiento`);\n"
                + "ALTER TABLE `visita` ADD PRIMARY KEY (`idVisita`), ADD KEY `idMascota` (`idMascota`), ADD KEY `idTratamiento` (`idTratamiento`);\n"
                + "ALTER TABLE `cliente` MODIFY `idCliente` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n"
                + "ALTER TABLE `mascota` MODIFY `idMascota` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;\n"
                + "ALTER TABLE `tratamiento` MODIFY `idTratamiento` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n"
                + "ALTER TABLE `visita` MODIFY `idVisita` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n"
                + "ALTER TABLE `mascota` ADD CONSTRAINT `mascota_ibfk_1` FOREIGN KEY (`idCliente`) REFERENCES `cliente` (`idCliente`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "ALTER TABLE `tratamiento` ADD CONSTRAINT `tratamiento_ibfk_1` FOREIGN KEY (`idTratamiento`) REFERENCES `visita` (`idTratamiento`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "ALTER TABLE `visita` ADD CONSTRAINT `visita_ibfk_1` FOREIGN KEY (`idMascota`) REFERENCES `mascota` (`idMascota`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "COMMIT;";
        creaTablas(tabla);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        String tabla = "START TRANSACTION;\n"
                + "CREATE TABLE `cliente` (`idCliente` int NOT NULL,`nombre` varchar(40) NOT NULL,`direccion` varchar(40) NOT NULL,`correo` varchar(40) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `detalle` (`idPedido` int NOT NULL,`idProducto` int NOT NULL,`cantidad` double NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `pedido` (`idPedido` int NOT NULL,`fecha` date NOT NULL,`idCliente` int NOT NULL,`estado` tinyint(1) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `producto` (`idProducto` int NOT NULL,`nombre` varchar(40) NOT NULL,`descripcion` varchar(40) NOT NULL,`precio` double NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "ALTER TABLE `cliente` ADD PRIMARY KEY (`idCliente`);\n"
                + "ALTER TABLE `detalle` ADD PRIMARY KEY (`idPedido`), ADD KEY `idProducto` (`idProducto`);\n"
                + "ALTER TABLE `pedido` ADD PRIMARY KEY (`idPedido`), ADD KEY `idCliente` (`idCliente`);\n"
                + "ALTER TABLE `producto` ADD PRIMARY KEY (`idProducto`);\n"
                + "ALTER TABLE `cliente` MODIFY `idCliente` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `detalle` MODIFY `idPedido` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `pedido` MODIFY `idPedido` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `producto` MODIFY `idProducto` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `detalle` ADD CONSTRAINT `detalle_ibfk_1` FOREIGN KEY (`idProducto`) REFERENCES `producto` (`idProducto`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "ALTER TABLE `pedido`ADD CONSTRAINT `pedido_ibfk_2` FOREIGN KEY (`idPedido`) REFERENCES `detalle` (`idPedido`) ON DELETE RESTRICT ON UPDATE RESTRICT, ADD CONSTRAINT `pedido_ibfk_3` FOREIGN KEY (`idCliente`) REFERENCES `cliente` (`idCliente`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "COMMIT;";
        creaTablas(tabla);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jcbBaseDatosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbBaseDatosItemStateChanged
        // cuando el usuario selecciona otra base de datos se debe indicar a la conexion que se cambio de base de datos con el comando USE + nombre de la base de datos
        if (primierInicio){
            primierInicio = false;
        }else{
            String cadena = "use " + jcbBaseDatos.getSelectedItem();
            boolean vResp = ejecutaSQL(cadena);
            setTitle("Sistem de Bases de Datos --- Conectado a " + jcbBaseDatos.getSelectedItem().toString().toUpperCase()  );
            conexion.setBaseDatos(jcbBaseDatos.getSelectedItem().toString());
        }
        muestraBaseDatos(); // se muestran las tablas y los campos de las mismas
        
    }//GEN-LAST:event_jcbBaseDatosItemStateChanged

    private void jcbBaseDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbBaseDatosMouseClicked
        
    }//GEN-LAST:event_jcbBaseDatosMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Se actualiza el contenido del combo con las tablas existentes en el servidor
        String tablaActual = jcbBaseDatos.getSelectedItem().toString();
        primierInicio = true;
        actualizarCombo();
        jcbBaseDatos.setSelectedItem(tablaActual);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        String tabla = "START TRANSACTION;\n"
                + "CREATE TABLE `comentarios` (`idcomentario` int NOT NULL,`idlibro` int NOT NULL,`idmiembro` int NOT NULL,`comentario` text NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `libro` (`idlibro` int NOT NULL,`titulo` varchar(40) NOT NULL,`autor` varchar(40) NOT NULL,`genero` varchar(40) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `miembros` (`idmienbro` int NOT NULL,`nombre` varchar(40) NOT NULL, `direccion` varchar(40) NOT NULL,`telefono` int NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "CREATE TABLE `prestamos` (`idprestamo` int NOT NULL,`idlibro` int NOT NULL,`idmiembro` int NOT NULL,`fechap` date NOT NULL,`fechad` date NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n"
                + "ALTER TABLE `comentarios` ADD PRIMARY KEY (`idcomentario`),ADD KEY `idlibro` (`idlibro`),ADD KEY `idmiembro` (`idmiembro`);\n"
                + "ALTER TABLE `libro` ADD PRIMARY KEY (`idlibro`);\n"
                + "ALTER TABLE `miembros` ADD PRIMARY KEY (`idmienbro`);\n"
                + "ALTER TABLE `prestamos` ADD PRIMARY KEY (`idprestamo`), ADD KEY `idlibro` (`idlibro`), ADD KEY `idmiembro` (`idmiembro`);\n"
                + "ALTER TABLE `comentarios` MODIFY `idcomentario` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `libro` MODIFY `idlibro` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `miembros` MODIFY `idmienbro` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `prestamos` MODIFY `idprestamo` int NOT NULL AUTO_INCREMENT;\n"
                + "ALTER TABLE `comentarios` ADD CONSTRAINT `comentarios_ibfk_1` FOREIGN KEY (`idmiembro`) REFERENCES `miembros` (`idmienbro`) ON DELETE RESTRICT ON UPDATE RESTRICT, ADD CONSTRAINT `comentarios_ibfk_2` FOREIGN KEY (`idlibro`) REFERENCES `libro` (`idlibro`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "ALTER TABLE `prestamos` ADD CONSTRAINT `prestamos_ibfk_1` FOREIGN KEY (`idmiembro`) REFERENCES `miembros` (`idmienbro`) ON DELETE RESTRICT ON UPDATE RESTRICT, ADD CONSTRAINT `prestamos_ibfk_2` FOREIGN KEY (`idlibro`) REFERENCES `libro` (`idlibro`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n"
                + "COMMIT;";
        creaTablas(tabla);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jtxComandosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxComandosKeyPressed
        // TODO add your handling code here:
        jtxComandos.setBackground(Color.WHITE);
    }//GEN-LAST:event_jtxComandosKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTabla;
    private javax.swing.JComboBox<String> jcbBaseDatos;
    private javax.swing.JMenu jmSalir;
    private javax.swing.JTextArea jtxBaseDatos;
    private javax.swing.JTextArea jtxComandos;
    // End of variables declaration//GEN-END:variables
    private void modelarTabla(ResultSet rs) throws SQLException {
        DefaultTableModel modelo = new DefaultTableModel();
        ResultSetMetaData meta = rs.getMetaData();
        int cantColum = meta.getColumnCount();
        for (int i = 1; i <= cantColum; i++) {
            modelo.addColumn(meta.getColumnName(i));
        }
        modelo.setRowCount(0); // Borra todas las filas
        while (rs.next()) {
            Object[] fila = new Object[cantColum];
            for (int i = 1; i <= cantColum; i++) {
                fila[i - 1] = rs.getObject(i);
            }
            modelo.addRow(fila);
        }
        jTabla.setModel(modelo);

    }
    private void creaTablas(String tablas){
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = conexion.getcSQL();
        String[] sentencias = tablas.split(";");
        for (String sql : sentencias) {
            if (!sql.trim().isEmpty()) {
                try {
                    ps = con.prepareStatement(sql);
                    ps.executeUpdate(sql);
                } catch (SQLException ex) {
                   // Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   // System.out.println(" error " + ex.getMessage());
                   JOptionPane.showMessageDialog(rootPane," Las Tablas ya existen");
                   break;
                }
            }
        }
        
    }
    
    private void actualizarCombo() { // Carga los nombres de las bases de Datos en el jComboBox
        try {
            ArrayList<String> nombresDataBase = new ArrayList<>();
            PreparedStatement ps = null;
            ResultSet rs = null;
            Connection con = conexion.getcSQL();
            String cadena = "show databases";
            ps = con.prepareStatement(cadena);
            rs = ps.executeQuery();
            jcbBaseDatos.removeAllItems();
            while (rs.next()) {
                nombresDataBase.add(rs.getString(1));
                /*
                String bdNombre = rs.getString(1);
                if (!bdNombre.contains("information_schema") && !bdNombre.contains("mysql") && !bdNombre.contains("performance_schema") && !bdNombre.contains("sys")) {
                    //if (!bdNombre.contains("information_schema") && !bdNombre.contains("performance_schema") ) {
                    jcbBaseDatos.addItem(bdNombre);
                }*/
            }
            Collections.sort(nombresDataBase);
            for (String string : nombresDataBase) {
                if (!string.equalsIgnoreCase("information_schema") && !string.equalsIgnoreCase("mysql") && !string.equalsIgnoreCase("performance_schema") && !string.equalsIgnoreCase("sys")) {
                    jcbBaseDatos.addItem(string);
                }
            }
        } catch (SQLException ex) {
            // Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "No se puede Actualizar el ComboBox con los nombres de Base de Datos");
        }
        
    }
    
    private boolean ejecutaSQL(String cadena){
        boolean vResp = false;
        try {
            PreparedStatement ps = null;
            ResultSet rs = null;
            Connection con = conexion.getcSQL();
            ps = con.prepareStatement(cadena);
            //rs = ps.executeQuery();
            ps.executeUpdate();
            vResp = true;
            jtxComandos.setBackground(Color.YELLOW);
        } catch (SQLException ex) {
            // Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            jtxComandos.setBackground(Color.RED);
            JOptionPane.showMessageDialog(null, "No se pudo ejecutar el comando \n " + cadena + " \n "+ ex.getMessage());
            vResp = false;
            
        }
        
        return vResp;
    }
    
    private void muestraBaseDatos(){
        jtxBaseDatos.setText("");
        String cadena = "SHOW FULL TABLES FROM " + conexion.getBaseDatos();
        try {
            PreparedStatement ps = null;
            ResultSet rs = null;
            Connection con = conexion.getcSQL();
            ps = con.prepareStatement(cadena);
            rs = ps.executeQuery();
            ArrayList<String> vTablas = new ArrayList<>();
            while (rs.next()) {
                vTablas.add(rs.getString(1));
            }
            //System.out.println(" " + cadena);
            Collections.sort(vTablas);
            for (String vTabla : vTablas) {
                jtxBaseDatos.append(" - " + vTabla + " \n ");
                //System.out.println(" " + "desc " + vTabla);
                // cadena = "SELECT column_name, data_type, column_default, column_key, extra FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '" + vTabla + "' ORDER BY COLUMN_NAME";
                cadena = "desc " + vTabla;
                ps = con.prepareStatement(cadena);
                rs = ps.executeQuery();
                ArrayList<String> vCampos = new ArrayList<>();
                while (rs.next()) {
                    vCampos.add(rs.getString(1).toLowerCase() + " - " + rs.getString(2).toLowerCase());
                }
                Collections.sort(vCampos);
                for (String vCampo : vCampos) {
                    jtxBaseDatos.append("---- " + vCampo + "\n");
                }
                /*
                while (rs.next()){
                    String nombreCampo = rs.getString(1) + " - " + rs.getString(2);
                    jtxBaseDatos.append("-----" + nombreCampo + "\n");
                }*/
            }
            jtxBaseDatos.setCaretPosition(0);
            jtxComandos.setBackground(Color.YELLOW);
        } catch (SQLException ex) {
            // Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            jtxComandos.setBackground(Color.RED);
            JOptionPane.showMessageDialog(null, "No se pudo cargar los datos de la Base de Datos en el jTextArea \n " + cadena + "\n" + ex.getMessage());
        }
    }
}
